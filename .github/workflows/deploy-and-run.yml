name: Deploy to AWS and Run Database Functions

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'schema/**'
      - 'app/**'
      - 'requirements.txt'
      - '.github/workflows/deploy-and-run.yml'
  schedule:
    # Run monthly interest calculation on the 1st of every month at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:  # Allow manual trigger

env:
  AWS_REGION: us-east-1  # Change to your preferred AWS region
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: microbanking-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Push to Amazon ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Get RDS endpoint
        id: rds
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier microbanking-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)
          echo "endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run database migrations via psql
        env:
          PGPASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ steps.rds.outputs.endpoint }}
          DB_PORT: 5432
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
        run: |
          apt-get update && apt-get install -y postgresql-client
          
          # Run schema files
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/drop_tables.sql || true
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/create_tables.sql
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/functions.sql
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/triggers.sql
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/procedures.sql
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/index.sql
          psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f schema/view.sql

  run-database-functions:
    name: Run Database Functions
    runs-on: ubuntu-latest
    needs: run-migrations
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Get RDS endpoint
        id: rds
        run: |
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier microbanking-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)
          echo "endpoint=$RDS_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Run database functions (Monthly Interest Calculation)
        env:
          DB_HOST: ${{ steps.rds.outputs.endpoint }}
          DB_PORT: 5432
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          python -c "
          import psycopg2
          from psycopg2.extras import RealDictCursor
          
          conn = psycopg2.connect(
              host='${{ env.DB_HOST }}',
              port='${{ env.DB_PORT }}',
              database='${{ env.DB_NAME }}',
              user='${{ env.DB_USER }}',
              password='${{ env.DB_PASSWORD }}'
          )
          
          with conn.cursor() as cur:
              print('Running calculate_monthly_interest()...')
              cur.execute('SELECT calculate_monthly_interest();')
              conn.commit()
              print('✓ Monthly interest calculation completed')
          
          conn.close()
          "

  deploy-to-ecs:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: run-database-functions
    
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition microbanking-backend \
            --query 'taskDefinition' > task-definition.json
          
          sed -i "s|${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:.*|${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g" task-definition.json

      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster microbanking-cluster \
            --service microbanking-backend \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster microbanking-cluster \
            --services microbanking-backend \
            --region ${{ env.AWS_REGION }}

  notify-slack:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-push, run-migrations, run-database-functions, deploy-to-ecs]
    if: always()

    steps:
      - name: Send Slack notification on success
        if: needs.deploy-to-ecs.result == 'success'
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "✅ MicroBanking Backend Deployment Successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*✅ Deployment to AWS Successful*\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref }}\n*Author:* ${{ github.actor }}"
                  }
                }
              ]
            }

      - name: Send Slack notification on failure
        if: needs.deploy-to-ecs.result == 'failure'
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "❌ MicroBanking Backend Deployment Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*❌ Deployment to AWS Failed*\n*Commit:* ${{ github.sha }}\n*Branch:* ${{ github.ref }}\n*Author:* ${{ github.actor }}\n*Details:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Logs>"
                  }
                }
              ]
            }
